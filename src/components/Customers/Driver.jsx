import React, { useState, useEffect } from 'react';
import './Driver.css';
import { driverService } from '../../services/driverService';
import { scheduleService } from '../../services/scheduleService';
import { useSelector } from 'react-redux';
import dayjs from 'dayjs';

const Drivers = () => {
  const vendorId = useSelector((state) => state.vendor.vendor.id);
  const [drivers, setDrivers] = useState([]);
  const [showAssignModal, setShowAssignModal] = useState(false);
  const [selectedDriverId, setSelectedDriverId] = useState(null);
  const [schedules, setSchedules] = useState([]);
  const [selectedSchedule, setSelectedSchedule] = useState(null);
  

  useEffect(() => {
    const fetchAllData = async () => {
      try {
        // L·∫•y danh s√°ch t√†i x·∫ø
        const driverResponse = await driverService.getAllDriver();
        if (driverResponse?.success) {
          setDrivers(driverResponse.data);
        }

        // L·∫•y danh s√°ch l·ªãch tr√¨nh
        const scheduleResponse = await scheduleService.getSchedules();
        if (scheduleResponse?.success) {
          // üîç Ch·ªâ gi·ªØ l·∫°i l·ªãch tr√¨nh c√≥ tr·∫°ng th√°i "upcoming"
          const upcomingSchedules = scheduleResponse.data.filter(
            (schedule) => schedule.status === 'upcoming'
          );
          setSchedules(upcomingSchedules);
        }
      } catch (error) {
        console.error('L·ªói khi t·∫£i d·ªØ li·ªáu', error);
      }
    };

    fetchAllData();
  }, [vendorId]);

  const handleAssignRoute = (driverId) => {
    setSelectedDriverId(driverId);
    setShowAssignModal(true);
  };

  const assignScheduleToDriver = async () => {
    try {
      if (!selectedSchedule) return;
  
      await driverService.assignSchedule(selectedDriverId, selectedSchedule);
      alert("Giao l·ªãch tr√¨nh th√†nh c√¥ng!");
      setShowAssignModal(false);
      setSelectedSchedule(null);
    } catch (error) {
      console.error("L·ªói khi giao l·ªãch tr√¨nh", error);
      alert("Giao l·ªãch tr√¨nh th·∫•t b·∫°i.");
    }
  };
  

  const handleDeleteDriver = async (driverId) => {
    if (window.confirm("B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a t√†i x·∫ø n√†y kh√¥ng?")) {
      try {
        await driverService.deleteDriver(driverId);
        setDrivers(drivers.filter(driver => driver.id !== driverId));
        alert("X√≥a t√†i x·∫ø th√†nh c√¥ng!");
      } catch (error) {
        console.error("L·ªói khi x√≥a t√†i x·∫ø", error);
      }
    }
  };

  return (
    <div className="customers-container">
      <div className="customers-header">
        <h1>Qu·∫£n L√Ω T√†i X·∫ø</h1>
      </div>

      <div className="table-container">
        <table>
          <thead>
            <tr>
              <th>M√£ Driver</th>
              <th>H·ªç T√™n</th>
              <th>S·ªë ƒêi·ªán Tho·∫°i</th>
              <th>Email</th>
              <th>S·ªë Chuy·∫øn ƒêi</th>
              <th>Thao T√°c</th>
            </tr>
          </thead>
          <tbody>
            {drivers.map((driver) => (
              <tr key={driver.id}>
                <td>{driver?.id}</td>
                <td>{driver?.name}</td>
                <td>{driver?.phone}</td>
                <td>{driver?.email || driver['e-mail']}</td>
                <td>{driver?.totalTrips}</td>
                <td>
                  <div className="action-buttons">
                    <button
                      className="action-btn assign-route"
                      title="Giao tuy·∫øn ƒë∆∞·ªùng"
                      onClick={() => handleAssignRoute(driver.id)}
                    >
                      <i className="fas fa-route">üöö</i>
                    </button>
                    <button
                      className="action-btn delete"
                      title="X√≥a t√†i x·∫ø"
                      onClick={() => handleDeleteDriver(driver.id)}
                    >
                      <i className="fas fa-trash">‚ùå</i>
                    </button>
                  </div>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      {/* Popup modal giao l·ªãch tr√¨nh */}
      {showAssignModal && (
          <div className="modal-overlay">
            <div className="modal-content">
              <h2>Ch·ªçn l·ªãch tr√¨nh ƒë·ªÉ giao cho t√†i x·∫ø</h2>
              {schedules.length > 0 ? (
                <ul>
                  {schedules.map((schedule) => (
                    <li key={schedule.id} style={{ marginBottom: '10px' }}>
                      <div>
                        <strong>{schedule.routeName}</strong>
                        <div style={{ fontSize: '14px', color: '#555' }}>
                          üïí <b>Th·ªùi gian ƒëi:</b> {dayjs(schedule.departureTime).format('DD/MM/YYYY HH:mm')} <br />
                          üïì <b>Th·ªùi gian ƒë·∫øn:</b> {dayjs(schedule.arrivalTime).format('DD/MM/YYYY HH:mm')}<br />
                          üìç <b>{schedule.route.startPoint}</b> ‚Üí <b>{schedule.route.endPoint}</b>
                        </div>
                      </div>
                      <button
                        style={{ marginLeft: '10px' }}
                        onClick={() => setSelectedSchedule(schedule.id)}
                      >
                        Ch·ªçn
                      </button>
                    </li>
                  ))}
                </ul>
              ) : (
                <p>Kh√¥ng c√≥ l·ªãch tr√¨nh upcoming n√†o.</p>
              )}

              {selectedSchedule && (
                <div style={{ marginTop: '20px' }}>
                  <p><strong>ƒê√£ ch·ªçn l·ªãch tr√¨nh:</strong> {selectedSchedule}</p>
                  <button onClick={assignScheduleToDriver}>X√°c nh·∫≠n giao l·ªãch tr√¨nh</button>
                </div>
              )}

              <button onClick={() => setShowAssignModal(false)}>ƒê√≥ng</button>
            </div>
          </div>
        )}
    </div>
  );
};

export default Drivers;
